println("Hello, world!");

let node = new_node(Int, 2);

let response = readln();

let xs = list(1, 2, 3);

let mapped_list = xs.map { x -> x + 2 };

// Possible type annotation syntax?
/*
  let mapped_list : List(Int)
  where
    mapped_list = xs.map { x -> x + 2 };
*/
// We could possibly also allow for a haskell-style
// where blocks with local visibility.
// We could maybe even omit the "let", and just do
/*
mapped_list : List(Int)
  = xs.map { x -> x + 2 };
*/
// also keeping the "where" syntax optional.

// Case syntax, including a variation on
// "lambda case"
/*
factorial : Int -> Int
where
  factorial = { when n ->
      is 0      => 0
      otherwise => factorial(n - 1)
  }
*/
// Idea: "let" can be used for exporting. If omitted, a variable is only local
//  / private.

println(xs);
println(mapped_list);

println(response.uppercase());

let mapped = node
    .map { x -> x + 3 }
    .map { x -> x * 7 };

let x = 2;
let y = 3;

let z = x + y;

dbg_trace_full(z + 3);
